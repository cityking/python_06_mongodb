集成已有数据库
python manage.py inspectdb >> myTemplateLibrary/models.py

mongodb数据库
下载 安装
创建数据目录
	在根目录下创建data/db 目录作为数据库目录
MongoDB的默认数据库为"db"，该数据库存储在data目录中
执行 "db" 命令可以显示当前数据库对象或集合
运行"use"命令，可以连接到一个指定的数据库

数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串
	不能是空字符串（"")
	不得含有' '（空格)、.、$、/、\和\0 (空宇符)
	应全部小写
	最多64字节

use DATABASE_NAME 创建数据库
db.createCollection(name, options) 创建集合
db 查询当前数据库
show dbs 查询所有数据库
db.dropDatabase() 删除数据库
db.collection.drop() 删除集合

db.col.insert({key:value,...}) 插入文档
我们也可以将数据定义为一个变量
document=({key:value,...})
db.col.insert(document)
插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。

更新文档
update() 方法用于更新已存在的文档。语法格式如下：
db.collection.update(
   <query>,
   <update>,
   {
     upsert: <boolean>,
     multi: <boolean>,
     writeConcern: <document>
   }
)
参数说明：
query : update的查询条件，类似sql update查询内where后面的。
update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
writeConcern :可选，抛出异常的级别。

save() 方法
save() 方法通过传入的文档来替换已有文档。语法格式如下：
db.collection.save(
   <document>,
   {
     writeConcern: <document>
   }
)
参数说明：
document : 文档数据。
writeConcern :可选，抛出异常的级别。


删除文档
db.collection.remove(
   <query>,
   {
     justOne: <boolean>,
     writeConcern: <document>
   }
)
参数说明：
query :（可选）删除的文档的条件。
justOne : （可选）如果设为 true 或 1，则只删除一个文档。
writeConcern :（可选）抛出异常的级别。

MongoDB 查询文档
MongoDB 查询数据的语法格式如下：
>db.COLLECTION_NAME.find()
find() 方法以非结构化的方式来显示所有文档。
如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：
>db.col.find().pretty()
pretty() 方法以格式化的方式来显示所有文档。

MongoDB AND 条件
MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，及常规 SQL 的 AND 条件。
语法格式如下：
>db.col.find({key1:value1, key2:value2}).pretty()

MongoDB OR 条件
MongoDB OR 条件语句使用了关键字 $or,语法格式如下：
>db.col.find(
   {
      $or: [
	     {key1: value1}, {key2:value2}
      ]
   }
).pretty()

MongoDB 条件操作符
MongoDB中条件操作符有：
(>) 大于 - $gt
(<) 小于 - $lt
(>=) 大于等于 - $gte
(<= ) 小于等于 - $lte

MongoDB $type 操作符


分片：
	1.启动Shard Server
	mongod --port 27020 --dbpath d:\data\db\s0 --logpath D:\data\logs\s0.log --logappend --install --serviceName mongodb0 --serviceDisplayName mongodb0
	net start mongodb0

	mongod --port 27023 --dbpath d:\data\db\s3 --logpath D:\data\logs\s3.log  --logappend --install --serviceName mongodb3 --serviceDisplayName mongodb3
	net start mongodb3

	2.启动Config Server
	mongod --port 27100 --dbpath d:\data\db\conf --logpath d:\data\logs\conf.log --logappend --install --serviceName mongodbconf --serviceDisplayName mongodbconf
	net start mongodbconf

	3.启动Route Process
	mongos --port 40000 --configdb localhost:27100 --install --logpath=d:/data/logs/route.log --chunkSize 500 --serviceName mongodbroute --serviceDisplayName mongodbroute

	4.配置Sharding
	接下来，我们使用MongoDB Shell登录到mongos，添加Shard节点
	mongo admin --port 40000

	mongos> db.runCommand({ addshard:"localhost:27020" })
		{ "shardAdded" : "shard0000", "ok" : 1 }
	mongos> db.runCommand({ addshard:"localhost:27023" })
		{ "shardAdded" : "shard0001", "ok" : 1 }
	mongos> db.runCommand({ enablesharding:"test" }) #设置分片存储的数据库
		{ "ok" : 1 }
	mongos> db.runCommand({ shardcollection: "test.log", key: { id:1,time:1}})
		{ "collectionsharded" : "test.log", "ok" : 1 }
	mongos>

	5.程序代码内无需太大更改，直接按照连接普通的mongo数据库那样，将数据库连接接入接口40000


MongoDB 备份(mongodump)与恢复(mongorestore)

	MongoDB数据备份 mongodump命令脚本语法如下：
	
	>mongodump -h dbhost -d dbname -o dbdirectory
	-h：
	MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017
	-d：
	需要备份的数据库实例，例如：test
	-o：
	备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。



	MongoDB数据恢复
	mongodb使用 mongorestore 命令来恢复备份的数据。
	语法
	mongorestore命令脚本语法如下：
	>mongorestore -h dbhost -d dbname --directoryperdb dbdirectory
	-h：
	MongoDB所在服务器地址
	-d：
	需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2
	--directoryperdb：
	备份数据所在位置，例如：c:\data\dump\test，这里为什么要多加一个test，而不是备份时候的dump，读者自己查看提示吧！
	--drop：
	恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！

更多参考：http://www.runoob.com/mongodb/mongodb-tutorial.html

配置Django下的mongodb数据库

1.安装 mongoengine	pip install mongoengine
2.修改 settings.py文件

	INSTALLED_APPS = [
    		.........,
    		'mongoengine',
	]

	DATABASES = {
    		'default': {
        	'ENGINE': 'django.db.backends.dummy',
    	}
	}

	MONGODB_DATABASES = {
        	'default':{
                	'name':'test',
                	'host':'127.0.0.1',
                	'tz_aware':True,
        	}

	}

	from mongoengine import connect
	connect('test', host='127.0.0.1')

3.models.py文件

# encoding:utf-8
from __future__ import unicode_literals

from django.db import models
from mongoengine import *

# Create your models here.


#class Poem(Document):
class Poem(DynamicDocument):
        meta = {
                'collection':'poem_data',
        }
        poem_id = SequenceField(required=True, primary_key=True)
        author = StringField()
        title = StringField()
        @queryset_manager
        def show_news(doc_cls, queryset):
                return queryset.order_by('-poem_id')

4.views.py文件


# encoding:utf-8
from django.shortcuts import ：render,HttpResponseRedirect
from mongodb_django.models import Poem

# Create your views here.
def add(request):
        if request.method == 'POST':
                title = request.POST.get('title')
                author = request.POST.get('author')
                poem = Poem(title=title,author=author)
                poem.tag='tag'
                poem.save()
                return HttpResponseRedirect('/')
        else:
                return render(request, 'add.html')
def home(request):
        return render(request, 'home.html', {'showtitle':'所有诗词信息','poems':Poem.show_news()})

def update(request):
        if request.method == 'POST':
                id = request.POST.get('id')
                author = request.POST.get('author')
                title = request.POST.get('title')
                poems = Poem.objects(poem_id=id)
                for poem in poems:
                        #poem.author=author
                        #poem.title=title
                        #poem.save()
                        poem.update(title=title, author=author)
                return HttpResponseRedirect('/')
        else:
                return render(request,'update.html')

def delete(request):
        if request.method == 'POST':
                id = request.POST.get('id')
                poems = Poem.objects(poem_id=id)
                for poem in poems:
                        poem.delete()
                return HttpResponseRedirect('/')
        else:
                return render(request,'delete.html')



